10/03/2025 (Lezione di ChatGPT)

    + Rinominare il file come la classe pubblica
    + Sintassi uguale al C 
        - Commenti con // o /* ... */
        - Ecc..
    + Ci deve sempre essere il metodo "main"
        e.g.
            public static void main(String[] args) {
                // Codice qui
            }
    + Per vedere warning utili si può usare il comando "javac -Xlint"
    + Per eseguire un file java bisogna prima compilarlo con il comando "javac <nomeFile>.java" ed eseguirlo con il comando "java <nomeFile> <arg1> <arg2> ..."

    + Struttura codice .java
         ...;                    //opzionale, si usa per mettere insieme diversi file per un unico grande progetto

        import ...;                     //importazione librerie esterne come: java.util.Scanner (per leggere gli input da tastiera), java.util.ArrayList (per creare liste dinamiche)

        public class MioProgramma {     //nome della classe public uguale al nome del file, stile: CamelCase, ci può essere UNA SOLA CLASSE PUBLIC, questa è la classe esterna PRINCIPALE perchè contiene il metodo "main"
            
            public static void main(String[] args) {    //metodo per il "corpo" del programma
                //inizio del vero e proprio programma
            }

            public ClasseAnnidata() {                   //Classe annidata pubblica
                //corpo della ClasseAnnidata
            }

        }

        class SecondaClasse {           //seconda classe, senza public perchè ci può essere solo una classe public
            //corpo classe secondaria
        }

    + ATTENZIONE:
        - La classe chiamata PRINCIPALE è solitamente quella classe che:
            * Contiene il metodo "main"
            * Ha lo stesso nome del file che lo contiene
            * è l'unica classe esterna dichiarata public
        - Ci può essere una sola classe esterna public, mentre le classi annidate, possono essere dichiarate più classi public;
            Quindi nella classe principale ci possono essere classi annidate pubbliche,
            Per convenzione creiamo una sola classe esterna (quella principale)
        - Differenza tra "static" e non static:
            * La keyword "static" indica un membro appartenente alla classe e non alle singole istanze,
                il che vuol dire che quel membro sarà una risorsa condivisa in comune con tutte le istanze della classe
            * Un membro non dichiarato "static" significa che verrà creata una copia di quello stesso membro all'interno di ogni istanza della classe
                Quindi una variabile non dichiarata static se viene modificata all'interno di una istanza non influisce il valore di altre istanze, rendendoli assestanti
        - Differenza tra "public" e "private":
            * public permette di avere un membro accessibile da qualsiasi altra classe (usato per interfacce e metodi di servizio)
            * private permette invece di avere un membro accessibile solo all'interno della classe in cui viene dichiarato, fondamentale per l'incapsulamento e la protezione dei dati
        - Cosa vuol dire "String[] args" nella dichiarazione del metodo main?
            * "String[] args" è il parametro che si passa nel metodo main e serve per ricevere argomenti dalla riga di comando
            * e.g. per passare dei parametri al main una volta fatto il comando come scritto all'inizio del file bisogna:
                1. compilarlo tramite il comando: "javac <nomeFile>.java"
                2. eseguirlo tramite il comando: "java <nomeFile> <arg1> <arg2> ..."
                    -> essendo args un array di stringhe possiamo passarci n parametri, rilevati successivamente con "args.length", un intero che rappresenta la quantità di elementi nell'array args

+-----------------------------------------------------------------------------------------------------------+
11/03/2025 (Sempre ChatGPT)

    Oltre alla keyword public e private esiste anche la keyword protected:
        + La keyword protected permette di rendere accessibile un membro alla stessa classe, alle classi dello stesso package e alle sottoclassi(anche in un altro package)
        + Torna più utile in un concetto di ereditarietà
        + Permette di proteggere l'accesso dei dati a classi non correlate ma di consentire l'uso alle sottoclassi
        + Se il membro deve essere accessibile solo alla classe stessa conviene usare public, al contrario se deve essere accessibile a tutti si usa public
        + Una classe esterna non può essere dichiarata protected, al più "public" o "package-private" usato di default in assenza di public

    * Una classe (so cos'è non approfondirò l'argomento) è strutturata in questo modo:
        class NomeClasse {          //le classi sempre con iniziale maiuscola
            //Attributi
            int dimensione;
            ...

            //Costruttore, utilizzato per inizializzare gli oggetti
            Public NomeClasse (tipo attr1, tipo attr2, ...) {
                this.arg1 = arg1;           //nel caso parametro del costruttore e attributo della classe abbiano lo stesso nome si usa this. per riferirsi all'attributo della classe
                dimensione = attr2;         //in caso contrario si può non usare
                ...
            }

            //Metodi
            public tipo nomeMetodo() {          //nome del metodo con iniziale minuscola
                /*Corpo del metodo*/
            }
        }

        ESEMPIO:

        class Persona {
            // Attributi
            String nome;
            int eta;

            // Costruttore
            public Persona(String nome, int eta) {
                this.nome = nome;
                this.eta = eta;
            }

            // Metodi
            public void saluta() {
                System.out.println("Ciao, mi chiamo " + nome + " e ho " + eta + " anni.");
            }
        }

    * Il concetto di ereditarietà permette ad una classe di ereditare Attributi e Metodi di un'altra classe (o superclasse), e ridefinirne i Metodi o aggiungere degli Attributi e si dichiara così:
        
        //Superclasse
        class SuperClasse {
            //Attributi
            int attr1;

            //Costruttore
            public SuperClasse(int attr1) {
                this.attr1 = attr1;
            }

            //Metodi
            public int getAttr() {
                return attr1;
            }
        }

        //Classe derivata 
        class ClasseDerivata extends SuperClasse {
            //Eventuali attributi aggiuntivi
            int attr2;

            //Costruttore
            public ClasseDerivata(int attr1, int attr2) {
                super(attr1);           //costruttore della superclasse
                this.attr2 = attr2;
            }

            //Metodi
            public int getAttr() {
                return (attr1 + attr2);
            }
        }

    * Esistono quattro diversi tipi di ereditarietà:
        + Ereditarietà Singola:
            - Una sottoclasse eredita da una sola superclasse
        + Ereditarietà Multilivello:
            - Una sottoclasse eredia da un'altra sottoclasse
        + Ereditarietà Gerarchica:
            - Più classi ereditano da una stessa superclasse
        + Ereditarietà Multipla:
            - In Java una classe non può ereditare da più classi contemporaneamente, in questo caso si utilizzano le interfacce, quindi una classe eredita da una sola superclasse ma può implementare diverse interfacce
            - Esempio:
                //Superclasse
                class SuperClasse {
                    //Attributi
                    int attr1;

                    //Costruttore
                    public SuperClasse(int attr1) {
                        this.attr1 = attr1;
                    }

                    //Metodi
                    public int getAttr() {
                        return attr1;
                    }
                }

                //Esempio Interfaccia
                interface Interface1 {          //come per le classi, il nome delle interfacce con iniziale maiuscola
                    //Macro
                    int MACRO = 123;                  //viene definita automaticamente come "public static final", ovvero pubblica per tutti e comune per tutte le istanze. final significa che non può essere modificata

                    //Metodi
                    int metodo1();             //metodo che deve essere implementato 
                }

                //Classe derivata 
                class ClasseDerivata extends SuperClasse implements Interface1 {
                    //Eventuali attributi aggiuntivi
                    int attr2;

                    //Costruttore
                    public ClasseDerivata(int attr1, int attr2) {
                        super(attr1);           //costruttore della superclasse
                        this.attr2 = attr2;
                    }

                    //Metodi
                    public int getAttr() {
                        return (attr1 + attr2);
                    }

                    @Override
                    public void metodo1() {
                        return attr2 * 2;
                    }
                }

    * Quando si deve ridefinire un metodo si usa sempre @Override prima per evitare errori

    La stampa su terminale funziona tramite System.out.<comando>
        + Tra i comandi che si possono usare ne usiamo al momento 2:
            - printf, che ha lo stesso utilizzo dello printf del C
                + Per specificare il formato delle variabili usiamo:
                    * %d -> numeri interi
                    * %f -> numeri decimali (float e double)
                    * %s -> stringhe
                    * %n è l'equivalente di \n, quindi new line. Si potrbbe anche usare \n ma è consiglaibile usare %n perchè è più portabile
            - println, stampa e va a capo
                + Non può avere formattazione
            - print, stampa senza andare a capo
                
    Per eseguire l'input da tastiera bisogna:
        + includere le librerie utils: "import java.util.*;"
        + inizializzare un oggetto di tipo Scanner per indicare al programma che l'input viene da tastiera 
            Scanner scanner = new Scanner(System.in);
        + Dopodichè l'input da tastiera viene indirizzato direttamente in una variabile secondo diversi comandi:
            - nextLine() -> Stringa (tutta la riga)
            - next() -> Singola parola
            - nextInt() -> Numero intero
            - nextDouble() -> Numero decimale
            Quindi per esempio: 
            - String stringa = scanner.nextLine();
            scanner è l'oggetto di tipo Scanner creato precedentemente
        + Infine si chiude l'input da tastiera tramite il comando "scanner.close();"

+-----------------------------------------------------------------------------------------------------------+
31/03/2025 (Di nuovo ChatGPT ma a sto giro Plus)

Modificatori:
    I modificatori sono keyword che permettono di definire meglio il comportamento di classi, metodi, ecc..
    Sono divisibili in 2 differenti gruppi:
     - Modificatori di accesso (chi può vedere cosa)
        Questo gruppo è formato da 4 keyword:
         + Private
            Un membro dichiarato "private" è visobile solo all'interno della classe in cui è stato dichiarato
            Viene usato per protegegre i dati e "forzare" l'uso di metodi getter e setter
         + Public
            Il membro è accessibile da qualsiasi altra classe a prescindere dal package in cui si trova
         + Protected 
            Un membro "protected" può essere usato:
             * All'interno della stessa classe
             * All'interno di altre classi dello stesso package
             * All'interno delle sottoclassi (anche se dichiarate in package diversi)
         + uso default senza modificatori (package-private)
            Quando non è presente nessun modificatore si applica di default "package-private" ovvero può essere utilizzato da classi dello stesso package

     - Modificatori non di accesso (come si comporta un'entità nel programma)
        Questo tipo di modificatori non gestisce la visibilità ma il comportamento del membro nel programma
         + static
            Questo si usa per indicare un membro non appartenente alle singole istanze ma all'intera classe
            I membri definiti static sono condivisi con tutte le istanze di quella classe
         + final
            Un membro definito final si comporta come una costante:
             * Non può essere modificato dopo l'assegnazione
             * Non può essere sovrascritto nelle sottoclassi
         + abstract 
            Serve per definire metodi o classi incomplete (vediamo più avanti nel dettaglio)

Package:
    Un package è una struttura logico-fisica che serve per organizzare le classi
    I package definiscono non solo la struttura estetica del programma ma anche la visibilità (vedi protected e package-private)
        - Dichiarazione:
            Per mettere un file all'interno di un package si usa la direttiva "package"
            e.g. Persona.java
            +----------------------------------+               mio/
            | package mio.progetto.modello     |                 └── progetto/
            |                                  |                       └── modello/
            | public class Persona             |                               └── Persona.java
            +----------------------------------+
            questo dice al compilatore che la classe Persona si trova all'interno del percorso mio/progetto/modello/ (cartelle annidate)
            
        - Importare classi da un altro package:
            e.g. Una volta dichiarata la classe Main, al di fuori del package di Persona, si può importare quella classe mettendo:
            +---------------------------------------+
            | import mio.progetto.modello.Persona   |
            |                                       |
            | public class Main                     |
            +---------------------------------------+
            Se si volesse invece importare tutte le classi all'interno di quel package si usa l'asterisco *
            +---------------------------------------+
            | import mio.progetto.modello.*         |
            |                                       |
            | public class Main                     |
            +---------------------------------------+
            In compilazione si fa:
            \\\bash
                javac mio/progetto/modello/Persona.java
                javac -cp . main/Main.java
            \\\
            L'opzione "-cp ." serve per indicare che quel file verrà usato come classpath ovevro dovrà caricare altri package
            -cp . serve per iniziare a cercare altre classi (cp) dalla cartella corrente (.)(la cartella con cui stai operado nel terminale)
            (Quest'opzione va usata per tutti i file che contengono import di qualche package)
            Se ho due file .java non è necessario fare nessun import

        - Classi senza package:
            Quando non viene dichiarato nessun package, questo viene creato di default (sempre meglio dichiararlo)
            Per esercizi veloci si può non dichiarare il package del main
Array:
    Vabbè se stai leggendo gli appunti di PR2 spero tu sappia cos'è un array e non andrò oltre 
    In più c'è da sapere che puoi fare array di classi 
        - Dichiarazione:
            Il modo consigliato di dichiarare un array è:
                int[] array;
            Puoi farlo anche in stile C/C++ ma risulta meno chiaro, quindi fallo così
            Un altro modo per dichiararlo è:
                int[] array = new int[5];
        - Inizializzazione:
             + Esplicita
                (Discorso valido per ogni tipo di array)
                int[] array = {1, 2, 3, 4, 5, 6};
        - Accesso:
            Identico al C, quindi il primo elemento dell'array si trova in posizione 0
        - Cicli:
            Stessa cosa del C
        - E.g. di dichiarazione e inizializzazione di un array di tipo Persona:
          +--------------------------------------------------+
          |  ...                                             |
          |  Persona[] elenco = new Persona[3];              |
          |                                                  |
          |  elenco[0] = new Persona("Luca", "Rossi", 30);   |
          |  elenco[1] = new Persona("Anna", "Bianchi", 25); |
          |  elenco[2] = new Persona("Marco", "Neri", 40);   |
          |  ...                                             |
          +--------------------------------------------------+
        - Matrici:
            funzionano allo stesso modo del C e dichiarazione come array 
            e.g.
                int[][] matrix = new int[5][4];     //5 righe e 4 colonne
        - Array dinamici
            Si usa ArrayList (ne approfindiremo in seguito)
        - Grandezza:
            La grandezza è definita staticamente, ci si può accedere usando nome_array.length

Wrapping classes:
    In Java esistono diversi tipi primitivi (int, float, double, boolean, char, long, byte e short) che NON SONO OGGETTI, 
     spesso però potrebbe essere utile definirli tali, per esempio quando creaiamo ArrayList o HashMap ecc..
        Le classi Wrapper sono quindi delle classi che "avvolgono" un tipo primitivo, vediamoli:
            - int       ->  Integer
            - float     ->  Float
            - double    ->  Double
            - boolean   ->  Boolean
            - char      ->  Character
            - long      ->  Long
            - byte      ->  Byte
            - short     ->  Short
        La loro dichiarazione è definita con il costruttore valueOf()
        e.g.
            Integer numeroWrapper = Integer.valueOf(5);

    - Autoboxing:
        Con Java 5 è stato introdotto l'Autoboxineg, ovvero la conversione implicita da primitivo a classe Wrapper
        e.g.
            int numero = 5;
            Integer oggetto = numero;

    - Unboxing:
        É l'inverso del ìl'Autoboxing, ovvero converte implicitamente un Wrapper a un primitivo
        e.g. 
            Integer x = 20;
            int y = x;

Classi Astratte:
    Una classe astratta, definita con la keyword "abstract", è una particolare tipo di classe che non può essere istanziata direttamente, 
    ma serve come base per altre classi con la quale si estendono usando "extends"

    La usiamo per "obbligare" alle sottoclassi ad impiegare certi comportamenti, evitare di duplicare codice nelle sottoclassi o per avere una base modello
    e.g. della sintassi
        +----------------------------------------------------+
        | public abstract class Animale{                     |
        |     String nome;                                   |
        |                                                    |
        |     // Costruttore                                 |
        |     public Animale(String nome) {                  |
        |         this.nome = nome;                          |
        |     }                                              |
        |                                                    |
        |     // Metodo astratto (senza corpo)               |
        |     public abstract void verso();                  |
        |                                                    |
        |     // Metodo concreto                             |
        |     public void saluta() {                         |
        |         System.out.println("Ciao, sono " + nome);  |
        |     }                                              |
        | }                                                  |
        +----------------------------------------------------+

    - Polimorfismo
        Usare le classi astratte permette anche di sfruttare il polimorfismo
        e.g.
            Animale cane = new Cane("Nome cane");


